var searchIndex = JSON.parse('{\
"figures":{"doc":"Figures","t":"DNQIEDINIIIQISSSSSSSIDQIIDQIIIIQDQIIIQSSILLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLOLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLKLLKLLKLLKKLLLLLLLLMLLLLLLLLLLLLKLLLLLLLLLLLKLLLKLLLLKLLLLKLLLKKLLLKLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLMKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLMMMDSSSSSSDDSSSLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Angle","Float","Float","FloatConversion","FloatOrInt","Fraction","FromComponents","Int","IntoComponents","IntoSigned","IntoUnsigned","Lp","Lp2D","MAX","MAX","MIN","MIN","ONE","PI","PX_SCALING_FACTOR","PixelScaling","Point","Px","Px2D","Ranged","Rect","Representation","Roots","Round","ScreenScale","ScreenUnit","Signed","Size","UPx","UPx2D","Unit","UnscaledUnit","Unsigned","ZERO","ZERO","Zero","abs","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","area","atan","atan2","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast","cast","cast","cast","cast","cast","cast_into","cast_into","cast_into","cast_into","cast_into","cast_into","cbrt","ceil","ceil","ceil","clamp","clamp","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cm","cm","cmp","cmp","cmp","cmp","compare","compare","compare","compare","contains","cos","default","default","default","degrees","degrees_f","degrees_fraction","denominator","deserialize","deserialize","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","dot","downcast","downcast","downcast","downcast","downcast","downcast","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","expand_rounded","extent","extents","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fraction","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_cast","from_cast","from_components","from_components","from_components","from_extents","from_float","from_float","from_float","from_lp","from_lp","from_lp","from_px","from_px","from_px","from_unscaled","from_upx","from_upx","from_upx","from_vec","from_vec","hash","hash","hash","hash","height","inches","inches","inset","intersection","intersects","into","into","into","into","into","into","into_cm","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_components","into_compound","into_degrees","into_f32","into_float","into_float","into_float","into_inches","into_lp","into_lp","into_lp","into_mm","into_points","into_px","into_px","into_px","into_raidans","into_raidans_f","into_signed","into_signed","into_signed","into_signed","into_unscaled","into_unsigned","into_unsigned","into_unsigned","into_unsigned","into_upx","into_upx","into_upx","inverse","is_negative","is_positive","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","is_zero","is_zero","magnitude","map","map","map","max","max","min","min","mm","mm","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","neg","neg","new","new","new","new","new_whole","numerator","origin","partial_cmp","partial_cmp","partial_cmp","partial_cmp","points","points","px","px","radians","radians_f","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","round","round","round","round","round_with_amount","serialize","serialize","serialize","serialize","serialize","sin","size","sqrt","squared","squared","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","tan","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_vec","to_vec","try_cast","try_cast","try_cast","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","units","upcast","upcast","upcast","upcast","upcast","upcast","upx","upx","width","x","y","Lp","MAX","MAX","MAX","MIN","MIN","MIN","Px","UPx","ZERO","ZERO","ZERO","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","cast","cast","cast","cast_into","cast_into","cast_into","cbrt","cbrt","cbrt","ceil","ceil","ceil","clone","clone","clone","clone_into","clone_into","clone_into","cm","cm_f","cmp","cmp","cmp","compare","compare","compare","default","default","default","deserialize","deserialize","deserialize","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","downcast","downcast","downcast","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","floor","floor","floor","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_cast","from_cast","from_cast","from_cast","from_float","from_float","from_float","from_lp","from_lp","from_lp","from_px","from_px","from_px","from_unscaled","from_unscaled","from_unscaled","from_upx","from_upx","from_upx","get","get","get","hash","hash","hash","inches","inches_f","into","into","into","into_components","into_components","into_components","into_float","into_float","into_float","into_lp","into_lp","into_lp","into_px","into_px","into_px","into_signed","into_signed","into_signed","into_unscaled","into_unscaled","into_unscaled","into_unsigned","into_unsigned","into_upx","into_upx","into_upx","is_valid_bit_pattern","is_valid_bit_pattern","is_valid_bit_pattern","is_zero","is_zero","is_zero","mm","mm_f","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","neg","neg","new","new","new","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","points","points_f","pow","pow","pow","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","round","round","round","saturating_add","saturating_add","saturating_add","saturating_div","saturating_div","saturating_div","saturating_mul","saturating_mul","saturating_mul","saturating_sub","saturating_sub","saturating_sub","serialize","serialize","serialize","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","upcast","upcast","upcast"],"q":[[0,"figures"],[524,"figures::units"],[804,"core::ops::arith"],[805,"core::ops::arith"],[806,"core::ops::arith"],[807,"intentional::cast"],[808,"core::convert"],[809,"core::convert"],[810,"core::cmp"],[811,"core::result"],[812,"serde::de"],[813,"serde::de"],[814,"core::fmt"],[815,"euclid"],[816,"euclid::point"],[817,"winit::dpi"],[818,"core::hash"],[819,"core::ops::function"],[820,"core::time"],[821,"core::ops::arith"],[822,"serde::ser"],[823,"core::convert"]],"d":["An measurement of distance between two rays sharing a …","A floating point value.","The type that represents this type in floating point form.","Converts a type to its floating point representation.","A type representing either an <code>i32</code> or an <code>f32</code>.","A fraction type for predictable integer-based math.","Converts from a 2d vector in tuple form","An integer value.","Converts to a 2d vector in tuple form","Converts a value into its signed representation, clamping …","Converts a value into its signed representation, clamping …","This type when measuring with <code>Lp</code>.","Constructors for types that are composed of two <code>Lp</code> …","The maximum value for this type.","The maximum value representable by this type.","The minimum value for this type.","The minimum value representable by this type.","A fraction equivalent to 1.","A fractional approximation of Pi, accurate to within …","The scaling factor to apply when converting to pixels, in …","A type that has a scaling factor when converting to pixels.","A coordinate in a 2d space.","This type when measuring with <code>Px</code>.","Constructors for types that are composed of two <code>Px</code> …","A type that has a minimum and a maximum.","A 2d area expressed as an origin (<code>Point</code>) and a <code>Size</code>.","The internal reprsentation used by this type.","Functionality for getting the root of a number.","Functionality for rounding values to whole numbers.","Converts this type into its measurement in <code>Px</code> and <code>Lp</code>.","A type that can be used as a <code>Unit</code> in figures that knows …","The signed representation of this type.","A width and a height measurement.","This type when measuring with <code>UPx</code>.","Constructors for types that are composed of two <code>UPx</code> …","A type that can be used as a <code>Unit</code> in figures.","Information about scaling for a numerical unit type.","The unsigned representation of this type.","The zero value for this type.","A fraction equivalent to 0.","A type that can represent a zero-value.","Returns the absolute value of this fraction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the area of the rectangle.","Returns the arctangent of this fraction.","Returns the result of arctan(self/other) while correctly …","","","","","","","","","","","","","","Converts the contents of this point to <code>NewUnit</code> using <code>From</code>.","","Converts the contents of this point to <code>NewUnit</code> using <code>From</code>.","","","Converts the contents of this size to <code>NewUnit</code> using <code>From</code>.","","","","","","","","","Returns the cube root of <code>self</code>.","Returns <code>self</code> raised to the next whole number further away …","","","","","","","","","","","","","","","","","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","","","","","","","","","Returns true if this rect contains <code>point</code>.","Calculates the cosine of this angle.","","","","Returns an angle for <code>degrees</code>, where 360 degrees is equal …","Returns an angle for <code>degrees</code>, where 360 degrees is equal …","Returns an angle for <code>radians</code>, where <code>2π</code> is equal to one …","Returns the denominator of the fraction.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the dot product of <code>self</code> and <code>other</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Expands this rect to the nearest whole number.","Returns the non-origin point.","Returns the top-left and bottom-right points of this …","Returns <code>self</code> lowered to the next whole number closer to 0.","","","","","","","","","","Returns a new fraction.","","Returns the argument unchanged.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Returns a new instance from the 2d vector components …","","","Returns a new rectangle using the given points to form the …","Converts from floating point to this form.","","","Converts from Lp into this type, using the provided <code>scale</code> …","","","Converts from pixels into this type, using the provided …","","","Returns a new instance using the unscaled representation.","Converts from unsigned pixels into this type, using the …","","","Converts this type to another type using <code>FromComponents</code> and","Converts this type to another type using <code>FromComponents</code> and","","","","","The height component","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","Returns a rectangle that has been inset by <code>amount</code> on all …","Returns the overlapping rectangle of <code>self</code> and <code>other</code>. If the","Returns true if the areas of <code>self</code> and <code>other</code> overlap.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns this number as <code>Lp</code> using <code>Lp::cm</code>/<code>Lp::cm_f</code>.","Extracts this type’s 2d vector components.","","","","","","","","","Simplifies the fraction into a compound number.","Returns this angle as represented in degrees, where 360 …","Returns this fraction as a floating point number.","Returns this value in floating point form.","","","Returns this number as <code>Lp</code> using <code>Lp::inches</code>/<code>Lp::inches_f</code>.","Converts this value from its current unit into device …","","","Returns this number as <code>Lp</code> using <code>Lp::mm</code>/<code>Lp::mm_f</code>.","Returns this number as <code>Lp</code> using <code>Lp::points</code>/<code>Lp::points_f</code>.","Converts this value from its current unit into device …","","","Returns this angle as represented in radians, where <code>2π</code> is …","Returns this angle as represented in radians, where <code>2π</code> is …","Returns this value as an unsigned value. Values that are …","","","","Returns the inner, unscaled representation of this value.","Returns this value as an unsigned value. Negative values …","","","","Converts this value from its current unit into device …","","","Returns the inverse of this fraction.","Returns true if the fraction is negative (less than zero).","Returns true if the fraction is positive (greater than …","","","Returns true if <code>self</code> represents <code>0</code>.","Returns true if the fraction is zero.","","","Returns the magnitude of self, which is the absolute …","Maps each component to <code>map</code> and returns a new value with …","Maps each component to <code>map</code> and returns a new value with …","Maps each component to <code>map</code> and returns a new value with …","","","","","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a new fraction using the components provided.","Returns a new point with the provided <code>x</code> and <code>y</code> components.","Returns a new rectangle.","Returns a new size of the given <code>width</code> and <code>height</code>.","Returns a new fraction for a whole number.","Returns the numerator of the fraction.","The origin of the rectangle","","","","","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","Returns an angle for <code>radians</code>, where <code>2π</code> is equal to one …","Returns an angle for <code>radians</code>, where <code>2π</code> is equal to one …","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self</code> rounded to the nearest whole number.","Rounds this fraction to the nearest whole number.","","","Rounds this fraction to the nearest whole number, …","","","","","","Calculates the sine of this angle.","The size of the rectangle.","Returns the square root of <code>self</code>.","Returns a new point with both <code>x</code> and <code>y</code> initialized with <code>i</code>.","Returns a new size using <code>dimension</code> for both width and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calculates the tangent of this angle.","","","","","","","","","Converts this type to another type using <code>FromComponents</code> and","Converts this type to another type using <code>FromComponents</code> and","Converts the contents of this point to <code>NewUnit</code> using …","Converts the contents of this rect to <code>NewUnit</code> using <code>TryFrom</code>…","Converts the contents of this size to <code>NewUnit</code> using <code>TryFrom</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","The measurement units supported by figures.","","","","","","","Returns a new value containing the x and y components …","Returns a new value containing the x and y components …","The width component","The x-axis component.","The y-axis component","Logical pixels, a device-independent measurement","The maximum value for this type.","The maximum value for this type.","The maximum value for this type.","The minimum value for this type.","The minimum value for this type.","The minimum value for this type.","Physical pixels","Unsigned Physical pixels","Zero for this type.","Zero for this type.","Zero for this type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a value equivalent to the number of <code>centimeters</code> …","Returns a value equivalent to the number of <code>centimeters</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","Returns the contained value, rounded if applicable.","Returns the contained value, rounded if applicable.","Returns the contained value, rounded if applicable.","","","","Returns a value equivalent to the number of <code>inches</code> …","Returns a value equivalent to the number of <code>inches</code> …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns a value equivalent to the number of <code>millimeters</code> …","Returns a value equivalent to the number of <code>millimeters</code> …","","","","","","","","","","","","","","","","","","Returns a new wrapped value for this unit.","Returns a new wrapped value for this unit.","Returns a new wrapped value for this unit.","","","","","","","","","Returns a value equivalent to the number of <code>points</code> …","Returns a value equivalent to the number of <code>points</code> …","Raises this value to power of <code>exp</code>.","Raises this value to power of <code>exp</code>.","Raises this value to power of <code>exp</code>.","","","","","","","","","","","","","","","","","","","Returns the result of adding <code>self</code> and <code>other</code>. If the …","Returns the result of adding <code>self</code> and <code>other</code>. If the …","Returns the result of adding <code>self</code> and <code>other</code>. If the …","Returns the result of dividing <code>self</code> by <code>other</code>. If the …","Returns the result of dividing <code>self</code> by <code>other</code>. If the …","Returns the result of dividing <code>self</code> by <code>other</code>. If the …","Returns the result of multiplying <code>self</code> and <code>other</code>. If the …","Returns the result of multiplying <code>self</code> and <code>other</code>. If the …","Returns the result of multiplying <code>self</code> and <code>other</code>. If the …","Returns the result of subtracting <code>other</code> from <code>self</code>. If the …","Returns the result of subtracting <code>other</code> from <code>self</code>. If the …","Returns the result of subtracting <code>other</code> from <code>self</code>. If the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,24,40,0,0,0,0,24,0,0,0,44,0,75,1,75,1,1,1,76,0,0,44,0,0,0,77,0,0,0,0,49,0,44,0,0,0,50,51,1,0,1,1,1,1,4,4,4,4,4,4,4,4,12,7,7,7,7,7,7,7,7,13,13,13,1,1,1,4,4,4,7,7,7,13,13,13,7,1,1,1,4,12,7,24,13,1,4,12,7,24,13,1,4,4,12,12,7,7,24,13,1,4,12,7,24,13,52,22,4,7,4,7,1,4,12,7,24,13,1,4,12,7,24,13,78,78,1,4,7,13,1,4,7,13,12,13,4,12,7,13,13,13,1,1,4,12,7,13,1,1,1,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,13,13,13,1,1,1,4,4,4,7,7,7,13,13,13,4,1,4,12,7,24,13,1,4,12,7,13,1,1,1,4,4,4,12,12,12,7,7,7,13,13,13,12,12,12,22,4,7,1,1,4,12,7,13,13,0,1,1,1,4,4,4,4,4,12,12,7,7,7,24,24,24,13,13,13,13,1,4,12,7,24,13,64,4,7,12,40,4,7,44,4,7,44,4,7,77,44,4,7,64,64,1,4,12,7,7,78,78,12,12,12,1,4,12,7,24,13,24,45,1,4,4,12,7,7,24,13,1,13,1,40,4,7,24,44,4,7,24,24,44,4,7,13,13,49,4,12,7,77,50,4,12,7,44,4,7,1,1,1,4,7,51,1,4,7,4,4,12,7,4,7,4,7,78,78,1,1,1,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,13,13,13,13,1,1,1,4,4,4,7,7,7,13,13,13,1,4,7,13,1,4,12,7,1,1,12,1,4,7,13,78,78,79,79,13,13,4,4,4,4,4,4,4,4,7,7,7,7,7,7,7,7,4,4,4,7,7,7,22,1,4,7,1,1,4,12,7,13,13,12,52,4,7,1,1,1,4,4,4,4,4,4,4,4,12,7,7,7,7,7,7,7,7,13,13,13,1,1,1,4,4,4,7,7,7,13,13,13,13,1,4,12,7,24,13,1,13,45,45,4,12,7,1,1,1,1,1,1,1,1,1,1,4,12,7,24,13,1,4,12,7,24,13,1,4,12,7,24,13,0,1,4,12,7,24,13,80,80,7,4,4,0,11,10,9,11,10,9,0,0,11,10,9,11,11,10,10,9,9,11,11,10,10,9,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,11,11,10,9,11,10,9,11,10,9,11,10,9,11,11,11,10,10,10,9,9,9,11,11,10,10,9,9,11,10,9,11,11,10,10,10,9,9,9,11,11,11,10,10,10,9,9,9,11,10,9,11,11,10,10,9,9,11,11,11,10,10,10,9,9,9,11,10,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,11,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,10,9,11,10,9,11,10,9,11,10,9,11,11,11,11,11,10,10,10,9,9,9,11,11,10,10,9,9,11,10,11,10,9,11,11,10,10,10,9,9,9,11,11,11,10,9,11,11,11,10,10,10,9,9,9,11,11,10,10,9,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,10,9,11,11,10,10,9,9,11,11,10,10,9,9,11,10,9,11,10,9,11,11,10,10,10,9,9,9,11,10,9,11,10,9,11,10,9],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1]],[[1,2]],[[1,3]],[[[4,[-1]],5],[],[[6,[5]]]],[[[4,[-2]],[7,[-1]]],[],[],[[6,[-1]]]],[[[4,[-1]],8],[],[[6,[8]]]],[[[4,[-1]],3],[],[[6,[3]]]],[[[4,[-2]],[4,[-1]]],[],[],[[6,[-1]]]],[[[4,[-1]],9],[],[[6,[9]]]],[[[4,[-1]],10],[],[[6,[10]]]],[[[4,[-1]],11],[],[[6,[11]]]],[[[12,[-1]],[4,[-1]]],[],6],[[[7,[-1]],10],[],[[6,[10]]]],[[[7,[-1]],5],[],[[6,[5]]]],[[[7,[-2]],[7,[-1]]],[],[],[[6,[-1]]]],[[[7,[-1]],11],[],[[6,[11]]]],[[[7,[-1]],8],[],[[6,[8]]]],[[[7,[-1]],3],[],[[6,[3]]]],[[[7,[-1]],9],[],[[6,[9]]]],[[[7,[-2]],[4,[-1]]],[],[],[[6,[-1]]]],[[13,3]],[[13,13]],[[13,2]],[[1,1],14],[[1,2],14],[[1,3],14],[[[4,[-1]],-1],14,[15,16]],[[[4,[-1]],[7,[-1]]],14,15],[[[4,[-1]],[4,[-1]]],14,15],[[[7,[-1]],[4,[-1]]],14,15],[[[7,[-1]],-1],14,[15,16]],[[[7,[-1]],[7,[-1]]],14,15],[[13,3],14],[[13,2],14],[[13,13],14],[[[7,[-1]]],[],[17,18]],[1,13],[[1,1],13],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-3,[],[],[[19,[-2]]]],[[[4,[-2]]],[[4,[-1]]],[],[[20,[-1]]]],[-1,-3,[],[],[[19,[-2]]]],[[[12,[-1]]],[[12,[-2]]],[],[[21,[-1]]]],[-1,-3,[],[],[[19,[-2]]]],[-1,-3,[],[],[[19,[-2]]]],[[[7,[-1]]],[[7,[-2]]],[],[[21,[-1]]]],[-1,-3,[],[],[[19,[-2]]]],[-1,-3,[],[],[[19,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-1,[]],[[[4,[-1]]],[[4,[-1]]],22],[[[7,[-1]]],[[7,[-1]]],22],[[[4,[-1]],[4,[-1]],[4,[-1]]],[[4,[-1]]],[23,18,17]],[[[7,[-1]],[7,[-1]],[7,[-1]]],[[7,[-1]]],[23,17,18]],[1,1],[[[4,[-1]]],[[4,[-1]]],16],[[[12,[-1]]],[[12,[-1]]],16],[[[7,[-1]]],[[7,[-1]]],16],[24,24],[13,13],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[1,1],25],[[[4,[-1]],[4,[-1]]],25,[23,18,17]],[[[7,[-1]],[7,[-1]]],25,[23,17,18]],[[13,13],25],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[[12,[-1]],[4,[-1]]],26,27],[13,1],[[],[[4,[-1]]],28],[[],[[12,[-1]]],28],[[],[[7,[-1]]],28],[2,13],[3,13],[1,13],[1,2],[-1,[[29,[1]]],30],[-1,[[29,[[4,[-2]]]]],30,31],[-1,[[29,[[12,[-2]]]]],30,31],[-1,[[29,[[7,[-2]]]]],30,31],[-1,[[29,[13]]],30],[[1,2]],[[1,3]],[[1,1]],[[[4,[-1]],8],[],[[32,[8]]]],[[[4,[-1]],5],[],[[32,[5]]]],[[[4,[-1]],3],[],[[32,[3]]]],[[[4,[-2]],[4,[-1]]],[],[],[[32,[-1]]]],[[[4,[-1]],10],[],[[32,[10]]]],[[[4,[-1]],11],[],[[32,[11]]]],[[[4,[-2]],[7,[-1]]],[],[],[[32,[-1]]]],[[[4,[-1]],9],[],[[32,[9]]]],[[[7,[-2]],[4,[-1]]],[],[],[[32,[-1]]]],[[[7,[-1]],11],[],[[32,[11]]]],[[[7,[-1]],10],[],[[32,[10]]]],[[[7,[-1]],9],[],[[32,[9]]]],[[[7,[-1]],8],[],[[32,[8]]]],[[[7,[-1]],3],[],[[32,[3]]]],[[[7,[-1]],5],[],[[32,[5]]]],[[[7,[-2]],[7,[-1]]],[],[],[[32,[-1]]]],[[13,2]],[[13,3]],[[13,13]],[[1,3],14],[[1,2],14],[[1,1],14],[[[4,[-1]],-1],14,[33,16]],[[[4,[-1]],[4,[-1]]],14,33],[[[4,[-1]],[7,[-1]]],14,33],[[[7,[-1]],[4,[-1]]],14,33],[[[7,[-1]],[7,[-1]]],14,33],[[[7,[-1]],-1],14,[33,16]],[[13,2],14],[[13,13],14],[[13,3],14],[[[4,[-1]],[4,[-1]]],-1,[17,6]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[1,1],26],[[[4,[-1]],[4,[-1]]],26,34],[[[12,[-1]],[12,[-1]]],26,34],[[[7,[-1]],[7,[-1]]],26,34],[[13,13],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[[12,[-1]]],[[12,[-1]]],[22,27]],[[[12,[-1]]],[[4,[-1]]],27],[[[12,[-1]]],[[14,[[4,[-1]],[4,[-1]]]]],[6,23,18]],[-1,-1,[]],[[[4,[-1]]],[[4,[-1]]],22],[[[7,[-1]]],[[7,[-1]]],22],[[1,35],36],[[1,35],36],[[[4,[-1]],35],36,37],[[[12,[-1]],35],36,37],[[[7,[-1]],35],36,37],[[13,35],36],[[13,35],36],0,[3,1],[-1,-1,[]],[2,1],[[[38,[8]]],[[4,[10]]]],[[[38,[39]]],[[4,[-1]]],40],[[[42,[3,41]]],[[4,[-1]]],40],[[[7,[-1]]],[[4,[-1]]],[]],[-1,-1,[]],[-1,-1,[]],[[[7,[-1]]],[[12,[-1]]],28],[[[4,[-1]]],[[7,[-1]]],[]],[[[43,[5]]],[[7,[9]]]],[-1,-1,[]],[3,24],[8,24],[-1,-1,[]],[2,13],[-1,-1,[]],[3,13],[1,13],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[14,[-1,-1]]],-2,[],[]],[[[14,[-1,-1]]],[[4,[-1]]],[]],[[[14,[-1,-1]]],[[7,[-1]]],[]],[[[4,[-1]],[4,[-1]]],[[12,[-1]]],27],[[],-1,[]],[[],[[4,[-1]]],40],[[],[[7,[-1]]],40],[1,-1,[]],[1,[[4,[-1]]],44],[1,[[7,[-1]]],44],[1,-1,[]],[1,[[4,[-1]]],44],[1,[[7,[-1]]],44],[[],-1,[]],[1,-1,[]],[1,[[4,[-1]]],44],[1,[[7,[-1]]],44],[-2,-3,[],[[45,[-1]]],[]],[-2,-3,[],[[45,[-1]]],[]],[[1,-1],14,46],[[[4,[-1]],-2],14,47,46],[[[12,[-1]],-2],14,47,46],[[[7,[-1]],-2],14,47,46],0,[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[[12,[-1]],-2],[[12,[-1]]],[],[[20,[-1]]]],[[[12,[-1]],[12,[-1]]],[[48,[[12,[-1]]]]],27],[[[12,[-1]],[12,[-1]]],26,[6,23,18]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,11],[-1,[[14,[-2,-2]]],[],[]],[-1,[[14,[-2,-2]]],[],[]],[[[4,[-1]]],[[14,[-1,-1]]],[]],[-1,[[14,[-2,-2]]],[],[]],[-1,[[14,[-2,-2]]],[],[]],[[[7,[-1]]],[[14,[-1,-1]]],[]],[-1,[[14,[-2,-2]]],[],[]],[-1,[[14,[-2,-2]]],[],[]],[-1,[[14,[-2,-2]]],[],[]],[1,[[14,[2,1]]]],[13,-1,[[21,[1]]]],[1,3],[-1,[],[]],[[[4,[-1]]],[],40],[[[7,[-1]]],[],40],[24,11],[[-1,1],[],[]],[[[4,[-1]],1],[],44],[[[7,[-1]],1],[],44],[24,11],[24,11],[[-1,1],[],[]],[[[4,[-1]],1],[],44],[[[7,[-1]],1],[],44],[13,-1,[[21,[1]]]],[13,3],[-1,[],[]],[[[4,[-1]]],[],49],[[[12,[-1]]],[],49],[[[7,[-1]]],[],49],[-1,[],[]],[-1,[],[]],[[[4,[-1]]],[],50],[[[12,[-1]]],[],50],[[[7,[-1]]],[],50],[[-1,1],[],[]],[[[4,[-1]],1],[],44],[[[7,[-1]],1],[],44],[1,1],[1,26],[1,26],[-1,26,[]],[-1,26,[]],[-1,26,[]],[1,26],[[[4,[-1]]],26,51],[[[7,[-1]]],26,51],[[[4,[-1]]],-1,[17,6,52,18]],[[[4,[-1]],-2],[[4,[-3]]],[],53,[]],[[[12,[-1]],-2],[[12,[-3]]],[],53,[]],[[[7,[-1]],-2],[[7,[-3]]],[],53,[]],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],[23,18,17]],[[[7,[-1]],[7,[-1]]],[[7,[-1]]],[23,17,18]],[[[4,[-1]],[4,[-1]]],[[4,[-1]]],[23,18,17]],[[[7,[-1]],[7,[-1]]],[[7,[-1]]],[23,17,18]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[1,1]],[[1,3]],[[1,2]],[[[4,[-1]],11],[],[[17,[11]]]],[[[4,[-1]],9],[],[[17,[9]]]],[[[4,[-1]],10],[],[[17,[10]]]],[[[4,[-1]],3],[],[[17,[3]]]],[[[4,[-2]],[7,[-1]]],[],[],[[17,[-1]]]],[[[4,[-1]],5],[],[[17,[5]]]],[[[4,[-2]],[4,[-1]]],[],[],[[17,[-1]]]],[[[4,[-1]],8],[],[[17,[8]]]],[[[7,[-1]],9],[],[[17,[9]]]],[[[7,[-1]],10],[],[[17,[10]]]],[[[7,[-1]],11],[],[[17,[11]]]],[[[7,[-2]],[7,[-1]]],[],[],[[17,[-1]]]],[[[7,[-2]],[4,[-1]]],[],[],[[17,[-1]]]],[[[7,[-1]],8],[],[[17,[8]]]],[[[7,[-1]],3],[],[[17,[3]]]],[[[7,[-1]],5],[],[[17,[5]]]],[[13,2]],[[13,13]],[[13,54]],[[13,3]],[[1,3],14],[[1,1],14],[[1,2],14],[[[4,[-1]],[7,[-1]]],14,55],[[[4,[-1]],[4,[-1]]],14,55],[[[4,[-1]],-1],14,[55,16]],[[[7,[-1]],[4,[-1]]],14,55],[[[7,[-1]],-1],14,[55,16]],[[[7,[-1]],[7,[-1]]],14,55],[[13,13],14],[[13,3],14],[[13,2],14],[1],[[[4,[-1]]],[],56],[[[7,[-1]]],[],56],[13],[[2,2],1],[[-1,-1],[[4,[-1]]],[]],[[[4,[-1]],[7,[-1]]],[[12,[-1]]],[]],[[-1,-1],[[7,[-1]]],[]],[2,1],[1,2],0,[[1,1],[[48,[25]]]],[[[4,[-1]],[4,[-1]]],[[48,[25]]],[23,18,17]],[[[7,[-1]],[7,[-1]]],[[48,[25]]],[23,17,18]],[[13,13],[[48,[25]]]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[-1,-2],-3,[[20,[24]]],[[20,[24]]],[]],[[-1,-2],-3,[[20,[10]]],[[20,[10]]],[]],[[-1,-2],-3,[[20,[10]]],[[20,[10]]],[]],[1,13],[3,13],[[[4,[-1]],9],[],[[57,[9]]]],[[[4,[-1]],8],[],[[57,[8]]]],[[[4,[-2]],[4,[-1]]],[],[],[[57,[-1]]]],[[[4,[-2]],[7,[-1]]],[],[],[[57,[-1]]]],[[[4,[-1]],11],[],[[57,[11]]]],[[[4,[-1]],10],[],[[57,[10]]]],[[[4,[-1]],3],[],[[57,[3]]]],[[[4,[-1]],5],[],[[57,[5]]]],[[[7,[-1]],8],[],[[57,[8]]]],[[[7,[-1]],3],[],[[57,[3]]]],[[[7,[-2]],[7,[-1]]],[],[],[[57,[-1]]]],[[[7,[-1]],10],[],[[57,[10]]]],[[[7,[-1]],11],[],[[57,[11]]]],[[[7,[-1]],5],[],[[57,[5]]]],[[[7,[-2]],[4,[-1]]],[],[],[[57,[-1]]]],[[[7,[-1]],9],[],[[57,[9]]]],[[[4,[-1]],[4,[-1]]],14,58],[[[4,[-1]],[7,[-1]]],14,58],[[[4,[-1]],-1],14,[58,16]],[[[7,[-1]],[4,[-1]]],14,58],[[[7,[-1]],[7,[-1]]],14,58],[[[7,[-1]],-1],14,[58,16]],[-1,-1,[]],[1,2],[[[4,[-1]]],[[4,[-1]]],22],[[[7,[-1]]],[[7,[-1]]],22],[1,[[14,[2,1]]]],[[1,-1],29,59],[[[4,[-1]],-2],29,60,59],[[[12,[-1]],-2],29,60,59],[[[7,[-1]],-2],29,60,59],[[13,-1],29,59],[13,1],0,[-1,-1,[]],[-1,[[4,[-1]]],16],[-1,[[7,[-1]]],18],[[1,1]],[[1,3]],[[1,2]],[[[4,[-1]],11],[],[[61,[11]]]],[[[4,[-1]],3],[],[[61,[3]]]],[[[4,[-2]],[7,[-1]]],[],[],[[61,[-1]]]],[[[4,[-1]],5],[],[[61,[5]]]],[[[4,[-1]],9],[],[[61,[9]]]],[[[4,[-1]],8],[],[[61,[8]]]],[[[4,[-1]],10],[],[[61,[10]]]],[[[4,[-2]],[4,[-1]]],[],[],[[61,[-1]]]],[[[12,[-1]],[4,[-1]]],[],61],[[[7,[-1]],3],[],[[61,[3]]]],[[[7,[-1]],9],[],[[61,[9]]]],[[[7,[-2]],[7,[-1]]],[],[],[[61,[-1]]]],[[[7,[-1]],5],[],[[61,[5]]]],[[[7,[-1]],11],[],[[61,[11]]]],[[[7,[-1]],8],[],[[61,[8]]]],[[[7,[-1]],10],[],[[61,[10]]]],[[[7,[-2]],[4,[-1]]],[],[],[[61,[-1]]]],[[13,13]],[[13,2]],[[13,3]],[[1,1],14],[[1,2],14],[[1,3],14],[[[4,[-1]],[4,[-1]]],14,62],[[[4,[-1]],[7,[-1]]],14,62],[[[4,[-1]],-1],14,[62,16]],[[[7,[-1]],[4,[-1]]],14,62],[[[7,[-1]],-1],14,[62,16]],[[[7,[-1]],[7,[-1]]],14,62],[[13,13],14],[[13,3],14],[[13,2],14],[13,1],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,63,[]],[-1,63,[]],[-1,-3,[],[],[[64,[-2]]]],[-1,-3,[],[],[[64,[-2]]]],[[[4,[-2]]],[[29,[[4,[-1]]]]],[],[[65,[-1]]]],[[[12,[-1]]],[[29,[[12,[-2]]]]],[],[[66,[-1]]]],[[[7,[-1]]],[[29,[[7,[-2]]]]],[],[[66,[-1]]]],[67,[[29,[1]]]],[68,[[29,[1]]]],[8,[[29,[1]]]],[69,[[29,[1]]]],[5,[[29,[1]]]],[-1,[[29,[-2]]],[],[]],[70,[[29,[1]]]],[71,[[29,[1]]]],[72,[[29,[1]]]],[73,[[29,[1]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],0,[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[[-1,-2],-3,[[20,[9]]],[[20,[9]]],[]],[[-1,-2],-3,[[20,[9]]],[[20,[9]]],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,11]],[[11,8]],[[10,8]],[[10,10]],[[9,5]],[[9,9]],[[11,11],14],[[11,8],14],[[10,8],14],[[10,10],14],[[9,5],14],[[9,9],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-3,[],[],[[19,[-2]]]],[-1,-3,[],[],[[19,[-2]]]],[-1,-3,[],[],[[19,[-2]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[11,11],[10,10],[9,9],[11,11],[10,10],[9,9],[11,11],[10,10],[9,9],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[[-1,-2],14,[],[]],[8,11],[3,11],[[11,11],25],[[10,10],25],[[9,9],25],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[-1,-2],25,[],[]],[[],11],[[],10],[[],9],[-1,[[29,[11]]],30],[-1,[[29,[10]]],30],[-1,[[29,[9]]],30],[[11,11]],[[11,8]],[[11,3]],[[10,3]],[[10,10]],[[10,8]],[[9,3]],[[9,9]],[[9,5]],[[11,8],14],[[11,11],14],[[10,8],14],[[10,10],14],[[9,5],14],[[9,9],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[11,11],26],[[11,8],26],[[10,10],26],[[10,8],26],[[10,9],26],[[9,10],26],[[9,9],26],[[9,5],26],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[[-1,-2],26,[],[]],[11,11],[10,10],[9,9],[[11,35],36],[[11,35],36],[[10,35],36],[[10,35],36],[[9,35],36],[[9,35],36],[8,11],[3,11],[-1,-1,[]],[-1,-1,[]],[8,10],[3,10],[-1,-1,[]],[3,9],[5,9],[-1,-1,[]],[-1,-1,[]],[3,10],[-1,-1,[]],[[],11],[[],10],[[],9],[1,11],[1,10],[1,9],[1,11],[1,10],[1,9],[[],11],[[],10],[[],9],[1,11],[1,10],[1,9],[11,8],[10,8],[9,5],[[11,-1],14,46],[[10,-1],14,46],[[9,-1],14,46],[8,11],[3,11],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[14,[-2,-2]]],[],[]],[-1,[[14,[-2,-2]]],[],[]],[-1,[[14,[-2,-2]]],[],[]],[11],[10],[9],[[11,1]],[[10,1]],[[9,1]],[[11,1]],[[10,1]],[[9,1]],[11],[10],[9],[11],[10],[9],[10],[9],[[11,1]],[[10,1]],[[9,1]],[-1,26,[]],[-1,26,[]],[-1,26,[]],[11,26],[10,26],[9,26],[8,11],[3,11],[[11,3]],[[11,11]],[[11,8]],[[10,3]],[[10,10]],[[10,8]],[[9,3]],[[9,9]],[[9,5]],[[11,8],14],[[11,11],14],[[10,8],14],[[10,10],14],[[9,9],14],[[9,5],14],[11],[10],[8,11],[8,10],[5,9],[[11,11],[[48,[25]]]],[[11,8],[[48,[25]]]],[[10,8],[[48,[25]]]],[[10,9],[[48,[25]]]],[[10,10],[[48,[25]]]],[[9,5],[[48,[25]]]],[[9,10],[[48,[25]]]],[[9,9],[[48,[25]]]],[8,11],[3,11],[[11,5],11],[[10,5],10],[[9,5],9],[[11,11]],[[11,8]],[[11,3]],[[10,3]],[[10,10]],[[10,8]],[[9,3]],[[9,9]],[[9,5]],[[11,8],14],[[11,11],14],[[10,8],14],[[10,10],14],[[9,5],14],[[9,9],14],[11,11],[10,10],[9,9],[[11,11],11],[[10,10],10],[[9,9],9],[[11,11],11],[[10,10],10],[[9,9],9],[[11,11],11],[[10,10],10],[[9,9],9],[[11,11],11],[[10,10],10],[[9,9],9],[[11,-1],29,59],[[10,-1],29,59],[[9,-1],29,59],[11,11],[10,10],[9,9],[[11,8]],[[11,11]],[[10,10]],[[10,8]],[[9,9]],[[9,5]],[[11,8],14],[[11,11],14],[[10,8],14],[[10,10],14],[[9,9],14],[[9,5],14],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,63,[]],[-1,63,[]],[-1,63,[]],[5,[[29,[11]]]],[-1,[[29,[-2]]],[],[]],[5,[[29,[10]]]],[9,[[29,[10]]]],[-1,[[29,[-2]]],[],[]],[8,[[29,[9]]]],[10,[[29,[9]]]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,[[29,[-2]]],[],[]],[-1,74,[]],[-1,74,[]],[-1,74,[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[48,[-2]]],[],[]]],"c":[],"p":[[3,"Fraction",0],[15,"i16"],[15,"f32"],[3,"Point",0],[15,"u32"],[8,"Add",804],[3,"Size",0],[15,"i32"],[3,"UPx",524],[3,"Px",524],[3,"Lp",524],[3,"Rect",0],[3,"Angle",0],[15,"tuple"],[8,"AddAssign",804],[8,"Clone",805],[8,"Mul",804],[8,"Copy",806],[8,"CastFrom",807],[8,"Into",808],[8,"From",808],[8,"Round",0],[8,"Ord",809],[4,"FloatOrInt",0],[4,"Ordering",809],[15,"bool"],[8,"Unit",0],[8,"Default",810],[4,"Result",811],[8,"Deserializer",812],[8,"Deserialize",812],[8,"Div",804],[8,"DivAssign",804],[8,"PartialEq",809],[3,"Formatter",813],[6,"Result",813],[8,"Debug",813],[3,"PhysicalPosition",814],[15,"f64"],[8,"FloatConversion",0],[3,"UnknownUnit",815],[3,"Point2D",816],[3,"PhysicalSize",814],[8,"ScreenScale",0],[8,"IntoComponents",0],[8,"Hasher",817],[8,"Hash",817],[4,"Option",818],[8,"IntoSigned",0],[8,"IntoUnsigned",0],[8,"Zero",0],[8,"Roots",0],[8,"FnMut",819],[3,"Duration",820],[8,"MulAssign",804],[8,"Neg",804],[8,"Rem",804],[8,"RemAssign",804],[8,"Serializer",821],[8,"Serialize",821],[8,"Sub",804],[8,"SubAssign",804],[3,"String",822],[8,"FromComponents",0],[8,"TryInto",808],[8,"TryFrom",808],[15,"usize"],[15,"u16"],[15,"u64"],[15,"isize"],[15,"i64"],[15,"i128"],[15,"u128"],[3,"TypeId",823],[8,"Ranged",0],[8,"PixelScaling",0],[8,"UnscaledUnit",0],[8,"Lp2D",0],[8,"Px2D",0],[8,"UPx2D",0]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
